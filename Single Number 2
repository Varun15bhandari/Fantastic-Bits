  ###  Brute Force Soln ###

class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer,Integer>map=new HashMap<>();
        for(int num:nums){
            map.put(num,map.getOrDefault(num,0)+1);
        }
        for(int key:map.keySet()){
            if(map.get(key)==1){
                return key;
            }
        }
        return -1;
    }
}
           ### Better ###
class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        int n=nums.length;
        for(int i=1;i<n;i=i+3){
            if(nums[i]!=nums[i-1]){
                return nums[i-1];
            }
            
        }
        return nums[n-1];
    }
}

         ### Optimal ###


class Solution {
    public int singleNumber(int[] nums) {
        //your code goes here
         int one = 0;
        int two = 0;
        
        // Iterate over all numbers in the array
        for (int i = 0; i < nums.length; i++) {
            // Update 'one' and 'two' based on current number
            one = (nums[i] ^ one) & ~two;
            two = (nums[i] ^ two) & ~one;
        }
        
        // 'one' will hold the number that appeared exactly once
        return one;
    }
}
